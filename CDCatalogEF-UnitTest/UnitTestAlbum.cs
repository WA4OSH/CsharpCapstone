using System.Linq;
using CDCatalogEF;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CDCatalogEF_UnitTest
{
    /// <summary>
    /// UnitTestAlbum creates a unique album with a existing genre and artist
    /// and adds it to the database.  Then, it fetches and deletes it.
    /// </summary>
    [TestClass]
    public class UnitTestAlbum
    {
        [TestMethod]
        public void TestAlbumAdd()
        {
            using (var ctx = new CDCatalogEntities1())
            {
                //Test init (none)

                //Get an artist we know exists -- Kaskade
                Artist A = ctx.Artists.Where(n => n.ArtistName.ToLower().Equals("kaskade")).FirstOrDefault();
                //Get a genre we know exists -- Electronic
                Genre G = ctx.Genres.Where(n => n.GenreName.ToLower().Equals("electronic")).FirstOrDefault();
                //create a test album
                Album m = new Album();
                m.AlbumID = 0; // autogenerated on add
                m.AlbumYear = 2014;
                m.ArtistID = A.ArtistID;
                m.AlbumTitle = "The KqxKAW Test Album";
                m.AlbumRating = 5;
                m.GenreID = G.GenreID;
                //add it to the database
                ctx.Albums.Add(m);
                int count = ctx.SaveChanges();
                Assert.IsTrue(count > 0 && m.AlbumID > 0, "No Record Added");

                //Test clean-up
                if (count > 0)
                {
                    var list = ctx.Albums
                        .Where(n => n.AlbumTitle.ToLower().Equals("the kqxkaw test album"));

                    ctx.Albums.RemoveRange(list);
                    ctx.SaveChanges();
                }
            }                                  
        }

        [TestMethod]
        public void TestAlbumFetch()
        {
            using (var ctx = new CDCatalogEntities1())
            {
                //Test init
                //Get an artist we know exists -- Kaskade
                Artist A = ctx.Artists.Where(n => n.ArtistName.ToLower().Equals("kaskade")).FirstOrDefault();
                //Get a genre we know exists -- Electronic
                Genre G = ctx.Genres.Where(n => n.GenreName.ToLower().Equals("electronic")).FirstOrDefault();
                //create a test album
                Album i = new Album();
                i.AlbumID = 0; // autogenerated on add
                i.AlbumYear = 2014;
                i.ArtistID = A.ArtistID;
                i.AlbumTitle = "The KqxKAW Test Album";
                i.AlbumRating = 5;
                i.GenreID = G.GenreID;
                //add it to the context, then database 
                ctx.Albums.Add(i);
                ctx.SaveChanges();


                //Find the test album in the database
                Album m = ctx.Albums
                    .Where(n => n.AlbumTitle.ToLower().Equals("the kqxkaw test album"))
                    .FirstOrDefault();
                Assert.IsTrue(m != null, "No Record Found");

                //Test clean-up
                if (m != null)
                {
                    var list = ctx.Albums
                        .Where(n => n.AlbumTitle.ToLower().Equals("the kqxkaw test album"));

                    ctx.Albums.RemoveRange(list);
                    int count = ctx.SaveChanges();
                    
                }
            }
        }

        [TestMethod]
        public void TestAlbumDelete()
        {
            using (var ctx = new CDCatalogEntities1())
            {
                //Test init
                Artist A = ctx.Artists.Where(n => n.ArtistName.ToLower().Equals("kaskade")).FirstOrDefault();
                //Get a genre we know exists -- Electronic
                Genre G = ctx.Genres.Where(n => n.GenreName.ToLower().Equals("electronic")).FirstOrDefault();
                //create a test album
                Album i = new Album();
                i.AlbumID = 0; // autogenerated on add
                i.AlbumYear = 2014;
                i.ArtistID = A.ArtistID;
                i.AlbumTitle = "The KqxKAW Test Album";
                i.AlbumRating = 5;
                i.GenreID = G.GenreID;
                //add it to the context, then database
                ctx.Albums.Add(i);
                ctx.SaveChanges();


                //find the list of "Testing Artists"
                //in case duplicates were added in the previous tests, delete them all
                var list = ctx.Albums
                    .Where(n => n.AlbumTitle.ToLower().Equals("the kqxkaw test album"));

                ctx.Albums.RemoveRange(list);
                int count = ctx.SaveChanges();
                Assert.IsTrue(count > 0, "No Record Deleted");

                //Test clean-up (none)

            }
        }
    }
}
